// Generated by CoffeeScript 1.3.3
/*
Copyright (c) 2012 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
*/

/**
A lightweight MVC view controller.

Used in conjunction with {@link Deft.mixin.Controllable}.
*/

Ext.define('Deft.mvc.ViewController', {
  alternateClassName: ['Deft.ViewController'],
  requires: ['Deft.log.Logger', 'Deft.mvc.ComponentSelector'],
  config: {
    /**
    		View controlled by this ViewController.
    */

    view: null
  },
  constructor: function(config) {
    if (config == null) {
      config = {};
    }
    if (config.view) {
      this.controlView(config.view);
    }
    return this.initConfig(config);
  },
  /**
  	@protected
  */

  controlView: function(view) {
    if (view instanceof Ext.ClassManager.get('Ext.Container')) {
      this.setView(view);
      this.registeredComponentSelectors = {};
      if (Ext.getVersion('extjs') != null) {
        if (this.getView().rendered) {
          this.onViewInitialize();
        } else {
          this.getView().on('afterrender', this.onViewInitialize, this, {
            single: true
          });
        }
      } else {
        if (this.getView().initialized) {
          this.onViewInitialize();
        } else {
          this.getView().on('initialize', this.onViewInitialize, this, {
            single: true
          });
        }
      }
    } else {
      Ext.Error.raise({
        msg: 'Error constructing ViewController: the configured \'view\' is not an Ext.Container.'
      });
    }
  },
  /**
  	Initialize the ViewController
  */

  init: function() {},
  /**
  	Destroy the ViewController
  */

  destroy: function() {
    return true;
  },
  /**
  	@private
  */

  onViewInitialize: function() {
    var config, id, listeners, live, originalViewDestroyFunction, selector, self, _ref;
    if (Ext.getVersion('extjs') != null) {
      this.getView().on('beforedestroy', this.onViewBeforeDestroy, this);
      this.getView().on('destroy', this.onViewDestroy, this, {
        single: true
      });
    } else {
      self = this;
      originalViewDestroyFunction = this.getView().destroy;
      this.getView().destroy = function() {
        if (self.destroy()) {
          originalViewDestroyFunction.call(this);
        }
      };
    }
    _ref = this.control;
    for (id in _ref) {
      config = _ref[id];
      selector = null;
      if (id !== 'view') {
        if (Ext.isString(config)) {
          selector = config;
        } else if (config.selector != null) {
          selector = config.selector;
        } else {
          selector = '#' + id;
        }
      }
      listeners = null;
      if (Ext.isObject(config.listeners)) {
        listeners = config.listeners;
      } else {
        if (!((config.selector != null) || (config.live != null))) {
          listeners = config;
        }
      }
      live = (config.live != null) && config.live;
      this.registerComponent(id, selector, listeners, live);
    }
    this.init();
  },
  /**
  	@private
  */

  onViewBeforeDestroy: function() {
    if (this.destroy()) {
      this.getView().un('beforedestroy', this.onBeforeDestroy, this);
      return true;
    }
    return false;
  },
  /**
  	@private
  */

  onViewDestroy: function() {
    var id;
    for (id in this.registeredComponentSelectors) {
      this.unregisterComponent(id);
    }
  },
  registerComponent: function(id, selector, listeners, live) {
    var componentSelector, getterName, matches;
    if (live == null) {
      live = false;
    }
    Deft.Logger.log("Registering '" + id + "' component.");
    if (this.registeredComponentSelectors[id] != null) {
      Ext.Error.raise({
        msg: "Error registering component: an existing component already registered as '" + id + "'."
      });
    }
    componentSelector = Ext.create('Deft.mvc.ComponentSelector', {
      id: id,
      view: this.getView(),
      selector: selector,
      listeners: listeners,
      scope: this,
      live: live
    });
    if (id !== 'view') {
      getterName = 'get' + Ext.String.capitalize(id);
      if (this[getterName] == null) {
        if (live) {
          this[getterName] = function() {
            return componentSelector.locate();
          };
        } else {
          matches = componentSelector.locate();
          if (matches == null) {
            Ext.Error.raise({
              msg: "Error locating component: no component(s) found matching '" + selector + "'."
            });
          }
          this[getterName] = function() {
            return matches;
          };
        }
        this[getterName].generated = true;
      }
    }
    this.registeredComponentSelectors[id] = componentSelector;
  },
  unregisterComponent: function(id) {
    var componentSelector, getterName;
    Deft.Logger.log("Unregistering '" + id + "' component.");
    if (this.registeredComponentSelectors[id] == null) {
      Ext.Error.raise({
        msg: "Error unregistering component: no component is registered as '" + id + "'."
      });
    }
    componentSelector = this.registeredComponentSelectors[id];
    componentSelector.destroy();
    if (id !== 'view') {
      getterName = 'get' + Ext.String.capitalize(id);
      if (this[getterName].generated) {
        this[getterName] = null;
      }
    }
    this.registeredComponentSelectors[id] = null;
  }
});
