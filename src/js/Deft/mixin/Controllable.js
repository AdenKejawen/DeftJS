// Generated by CoffeeScript 1.3.3
/*
Copyright (c) 2012 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
*/

/**
A mixin that creates and attaches the specified view controller(s) to the target view.

Used in conjunction with {@link Deft.mvc.ViewController}.
*/

Ext.define('Deft.mixin.Controllable', {
  requires: ['Deft.core.Class', 'Deft.log.Logger'],
  /**
  	@private
  */

  onClassMixedIn: function(targetClass) {
    Deft.Logger.deprecate('Deft.mixin.Controllable has been deprecated and can now be omitted - simply use the \'controller\' class annotation on its own.');
  }
}, function() {
  var applyControllerInterceptor;
  applyControllerInterceptor = function(data) {
    var originalConstructor;
    if (!data.constructor.$controllable) {
      originalConstructor = data.constructor;
      data.constructor = function(config) {
        var controller;
        if (config == null) {
          config = {};
        }
        if (this instanceof Ext.ClassManager.get('Ext.Container') && !this.$controlled) {
          try {
            controller = Ext.create(this.controller, config.controllerConfig || this.controllerConfig || {});
          } catch (error) {
            Deft.Logger.warn("Error initializing view controller: an error occurred while creating an instance of the specified controller: '" + this.controller + "'.");
            throw error;
          }
          if (this.getController === void 0) {
            this.getController = function() {
              return controller;
            };
          }
          this.$controlled = true;
          originalConstructor.apply(this, arguments);
          controller.controlView(this);
          return this;
        }
        return originalConstructor.apply(this, arguments);
      };
      data.constructor.$controllable = true;
    }
  };
  Deft.Class.registerPreprocessor('controller', function(Class, data, hooks, callback) {
    var self;
    if (!data.hasOwnProperty('constructor')) {
      data.constructor = function() {
        return this.callParent(arguments);
      };
    }
    applyControllerInterceptor(data);
    data.onClassExtended = function(Class, data, hooks) {
      if (!data.hasOwnProperty('controller') && data.hasOwnProperty('constructor')) {
        applyControllerInterceptor(data);
      }
    };
    self = this;
    Ext.require([data.controller], function() {
      if (callback != null) {
        callback.call(self, Class, data, hooks);
      }
    });
    return false;
  }, 'before', 'extend');
});
